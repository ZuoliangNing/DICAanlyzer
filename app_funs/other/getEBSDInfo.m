function Value = getEBSDInfo( EBSDData )

n = @ num2str; r = @ round;
Value = { 
    ['* Original file name: ',EBSDData.OriginalFileName], ...
    ['* Preprocess method: ', EBSDData.PreprocessMethod]};

Names = fieldnames( EBSDData.PreprocessPars );
for i = 1:length(Names)
    val = EBSDData.PreprocessPars.(Names{i});
    if isnumeric(val)
        Value = [ Value, ...
            [Names{i},': ', ...
            num2str( EBSDData.PreprocessPars.(Names{i})' )] ];
    else
        Value = [ Value, [Names{i},': ', val ] ];
    end
end

Value = [ Value, ...
    '* Size: ', ...
    [n(EBSDData.DataSize(1)),' rows / ', ...
     n(EBSDData.DataSize(2)),' columns / ', ...
     n(EBSDData.DataSize(3)),' pixels' ], ...
    ['* Width: ',n(r(EBSDData.XData(end)-EBSDData.XData(1),1)),' µm', ...
    ' / Height: ',n(r(EBSDData.YData(end)-EBSDData.YData(1),1)),' µm'], ...
    ['* Memory usage: ',n(r(EBSDData.MemorySize,1)),' MB'] ];

if EBSDData.Flag.Polygonized
    info = EBSDData.PolyInfo;
    Value = [Value, ...
        ' ', '************ Polygonization ************', ...
        ['* Time consumed: ',n(r(info.Time,1)),' s'], ...
        ['* Original grain number: ', n(info.OriginalGrainNumber)], ...
        ['* Minimum grain size: ', n(info.MinimumGrainSize)], ...
        ['* Grain number: ',n(EBSDData.Map.numgrains)], ...
        ['* Mean grain area: ',n(r(info.MeanGrainArea,2)),' µm^2'], ...
        ['* Mean grain diameter: ',n(r(info.MeanGrainDiameter,2)),' µm']];

    allIntrinsicInds = vertcat( EBSDData.Map.grains.IntrinsicInds );
    allHasvalueInds = find( EBSDData.AlphaData );
    if numel( allIntrinsicInds ) ~= numel( allHasvalueInds )
        
        axe = getAxe(); axis equal; axe.YAxis.Direction = 'reverse';
        colormap gray
        [X,Y] = meshgrid( EBSDData.XData, EBSDData.YData );
        X = X(:); Y = Y(:);
        image( axe, EBSDData.IQ, ...
            'XData', EBSDData.XData, 'YData', EBSDData.YData, ...
	        'CDataMapping', 'scaled', ...
            'AlphaData', EBSDData.AlphaData )
        axe.Visible = 'off';
        
        UnallocatedInds = setdiff( allHasvalueInds, allIntrinsicInds );
        if ~isempty( UnallocatedInds )
            Value = [Value, 'LESS ASSIGNED!!!' ];
            scatter( axe, ...
                X(UnallocatedInds), Y(UnallocatedInds), ...
                20, 'r', 'filled' )
        end

        tbl = tabulate( allIntrinsicInds );
        OverallocatedInds = tbl( tbl(:,2)>1, 1 );
        if isempty( OverallocatedInds )
            OverallocatedInds = setdiff( allIntrinsicInds, allHasvalueInds );
        end
        if ~isempty( OverallocatedInds )
            Value = [Value, 'OVER ASSIGNED!!!' ];
            scatter( axe, ...
                X(OverallocatedInds), Y(OverallocatedInds), ...
                20, 'r', 'filled', 's' )
        end
         
    else
        Value = [Value, '*', ...
            '* All pixels have been allocated correctly!' ];
    end

end

if EBSDData.Flag.Adjusted
    Value = [Value, ...
        ' ', '************ Adjust ************', ...
        ['* Point number: ',n(size(EBSDData.Adjust.PointCoords,1))], ...
        ];
end