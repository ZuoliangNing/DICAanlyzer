function getDICPreprocessMethods(app)

%   ---↓↓↓--- DEFINE data processing methods ---↓↓↓---
%       Properties including : (Identifier).(Property)
%               Name            - name for exhibition when selecting
%               Parameters      - name of Parameter variables
%               VariableNames   - user defined result variables
%               Info            - description of the method
%
%       Parameter values should be either :
%           (default values are defined in 'getDefault.m')
%               scalar
%               colum vector
%               character string

%%       --- 1 - 'UseDefault'
    Method.UseDefault.Name = 'Use Default';
    Method.UseDefault.Parameters    = {};
    Method.UseDefault.Default       = {};
    Method.UseDefault.VariableNames = {};
    Method.UseDefault.Info = {...
        'Use default strain values from orignial files.', ...
        'No modification on orignial data.' };

%%       --- 2 - 'Method_ManualMatch'
    Method.Method_ManualMatch.Name = 'Manual Match';
    Method.Method_ManualMatch.Parameters  = { ...
        'Bounding', ...
        'MaxAbsStrain' ...
        'MaxSize' };
    Method.Method_ManualMatch.Default = { ...
        [0,0,0,0]'  , ...
        1           ,...
        5000         };
    Method.Method_ManualMatch.VariableNames = { 'k' };
    Method.Method_ManualMatch.Info = {...
        'PARAMETERS:', ...
        'Bounding: ROI range in an individual data', ...
        '          1 - height - start', ...
        '          2 - height - end',   ...
        '          3 - width  - start', ...
        '          4 - width  - end', ...
        '          No data cutting if values are all zero', ...
        'MaxAbsStrain: The maximum value of the absolute strain', ...
        'MaxSize:  Maximum size of all dims of data'};

%%       --- 3 - 'Method_AutoMatch'
    Method.Method_AutoMatch.Name = 'Auto Match';
    Method.Method_AutoMatch.Parameters  = { ...
        'MaxAbsStrain' ...
        'MaxSize', ...
        'CoordScaleFactor', ...
        'DispScaleFactor' };
    Method.Method_AutoMatch.Default = { ...
        1           ,...
        5000, ...
        1, ...
        1 };
    Method.Method_AutoMatch.VariableNames = {};
    Method.Method_AutoMatch.Info = {...
        'Based on Method_ManualMatch ...', ...
        'Automatically detect valued area in original DIC data', ...
        '* PARAMETERS:', ...
        'CoordScaleFactor (µm/pixel):', ...
        '     Convert units of COORDINATES from pixel to µm', ...
        'DispScaleFactor (µm/pixel):', ...
        '     Convert units of DISPLACEMENT from pixel to µm' };

%%       --- 4 - 'Method_UseImage'
    Method.Method_UseImage.Name = 'Auto Match-Use Image';
    Method.Method_UseImage.Parameters  = { ...
        'MaxAbsStrain' ...
        'MaxSize', ...
        'CoordScaleFactor', ...
        'DispScaleFactor' };
    Method.Method_UseImage.Default = { ...
        1           ,...
        5000        , ...
        1, ...
        1 };
    Method.Method_UseImage.VariableNames = { 'Image' };
    Method.Method_UseImage.Info = {...
        'Based on Method_AutoMatch ...', ...
        'Image files (same name as the DIC .mat files) should be included', ...
        'Image formats: .jpg / .bmp', ...
        '* PARAMETERS:', ...
        'CoordScaleFactor (µm/pixel):', ...
        '     Convert units of COORDINATES from pixel to µm', ...
        'DispScaleFactor (µm/pixel):', ...
        '     Convert units of DISPLACEMENT from pixel to µm', ...
        '* USER VARIABLE:', ...
        'Image:', ...
        '     The image (stitched) used in DIC calculation' };


%%       --- 5 - 'Method_AutoMatch_Rotate'
    Method.Method_AutoMatch_Rotate.Name = 'Auto Match-Rotate';
    Method.Method_AutoMatch_Rotate.Parameters  = { ...
        'MaxAbsStrain' ...
        'MaxSize', ...
        'CoordScaleFactor', ...
        'DispScaleFactor', ...
        'Rotation' };
    Method.Method_AutoMatch_Rotate.Default = { ...
        1           ,...
        5000, ...
        1, ...
        1, ...
        1 };
    Method.Method_AutoMatch_Rotate.VariableNames = {};
    Method.Method_AutoMatch_Rotate.Info = {...
        'Based on Method_AutoMatch ...', ...
        'Optional rotaion on DIC data', ...
        '* PARAMETERS:', ...
        'Rotation (1~3): ', ...
        '     Number of counterclockwise rotations of 90 degrees about +Z axis' };
%%       --- 6 - 'Method_AutoMatch_CorrelationCoeff'
    Method.Method_AutoMatch_CorrelationCoeff.Name = 'Auto Match-CorrelationCoeff';
    Method.Method_AutoMatch_CorrelationCoeff.Parameters  = { ...
        'MaxAbsStrain' ...
        'MaxSize', ...
        'CoordScaleFactor', ...
        'DispScaleFactor' };
    Method.Method_AutoMatch_CorrelationCoeff.Default = { ...
        1           ,...
        5000, ...
        1, ...
        1 };
    Method.Method_AutoMatch_CorrelationCoeff.VariableNames = { ...
        'CorrelationCoeff' };
    Method.Method_AutoMatch_CorrelationCoeff.Info = {...
        'Based on Method_AutoMatch ...', ...
        'Also import correlation coefficients' };

%%       --- 7 - 'Method_ImportAbaqus'
    Method.Method_ImportAbaqus.Name = 'Import from ABAQUS result';
    Method.Method_ImportAbaqus.Parameters  = { ...
        'Column_X', 'Column_Y', 'Column_u', 'Column_v', 'Column_w', ...
        'Column_exx', 'Column_eyy', 'Column_ezz', ...
        'Column_exy', 'Column_exz', 'Column_eyz', ...
        'Column_sxx', 'Column_syy', 'Column_szz', ...
        'Column_sxy', 'Column_sxz', 'Column_syz', 'Column_mises', ...
        'Column_ta_basal', 'Column_ta_prism', 'Column_ta_pyram', ...
        'Column_sa_basal_1', 'Column_sa_basal_2', 'Column_sa_basal_3', ...
        'Column_sa_prism_1', 'Column_sa_prism_2', 'Column_sa_prism_3', ...
        'Column_CRSS_basal_1', 'Column_CRSS_basal_2', 'Column_CRSS_basal_3', ...
        'Column_CRSS_prism_1', 'Column_CRSS_prism_2', 'Column_CRSS_prism_3', ...
        'Column_G11','Column_G12','Column_G13', ...
        'Column_G21','Column_G22','Column_G23', ...
        'Column_G31','Column_G32','Column_G33' };


    Method.Method_ImportAbaqus.Default = num2cell(1:42);
    Method.Method_ImportAbaqus.VariableNames = { ...
        'w', 'ezz', 'exz', 'eyz', ...
        'sxx', 'syy', 'szz', 'sxy', 'sxz', 'syz', 'mises', ...
        'ta_basal', 'ta_prism', 'ta_pyram', ...
        'sa_basal_1', 'sa_basal_2', 'sa_basal_3', ...
        'sa_prism_1', 'sa_prism_2', 'sa_prism_3', ...
        'CRSS_basal_1', 'CRSS_basal_2', 'CRSS_basal_3', ...
        'CRSS_prism_1', 'CRSS_prism_2', 'CRSS_prism_3', ...
        'G11','G12','G13','G21','G22','G23','G31','G32','G33' };
    Method.Method_ImportAbaqus.Info = { ...
        'Use *.txt files exported by ''\AuxiliaryScripts\CPFEResults_Aba2Mat.m''', ...
        'Variables that are to be defined:', ...
        '   X / Y / u / v / w', ...
        '   exx / eyy / ezz / exy / exz / eyz', ...
        '   sxx / syy / szz / sxy / sxz / syz / mises', ...
        '   ta_basal / ta_prism / ta_pyram', ...
        '   sa_basal_1 / sa_basal_2 / sa_basal_3', ...
        '   sa_prism_1 / sa_prism_2 / sa_prism_3', ...
        'Parameters: column of each variable in the file'
        };

%%   ---↑↑↑↑↑↑↑↑↑-------------------------↑↑↑↑↑↑↑↑↑---

app.DICPreprocessMethods = structfun( ...
    @(m) rmfield( m, 'Default' ), Method, 'UniformOutput', false );


AllPreprocessMethods = fieldnames( Method );
n = length( AllPreprocessMethods );

for i = 1:n

    m = AllPreprocessMethods{i};
    
    if ~isfield( app.Default.Parameters. DICPreprocessMethods, m )

            app.Default.Parameters.DICPreprocessMethods.(m) = ...
                struct();

    end

    for j = 1:length( Method.(m).Parameters )
        
        par = Method.(m).Parameters{j};
        
        if ~isfield( app.Default.Parameters.DICPreprocessMethods.(m), par )

            app.Default.Parameters.DICPreprocessMethods.(m).(par) = ...
                Method.(m).Default{j};
      
        end

    end

end